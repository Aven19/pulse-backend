"""Create Postal Code Master table

Revision ID: 0019
Revises: 0018
Create Date: 2023-07-23 13:55:15.068398

"""
import json

from alembic import op
from app import base_dir
from app.models.postal_code_master import PostalCodeMaster
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0019'
down_revision = '0018'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('postal_code_master',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('pincode', sa.BigInteger(), nullable=True),
    sa.Column('district', sa.String(), nullable=True),
    sa.Column('state_name', sa.String(), nullable=True),
    sa.Column('zone', sa.String(), nullable=True),
    sa.Column('created_at', sa.BigInteger(), nullable=False),
    sa.Column('updated_at', sa.BigInteger(), nullable=True),
    sa.Column('deactivated_at', sa.BigInteger(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Call the seeder to store postal code master data
    seed()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('postal_code_master')
    # ### end Alembic commands ###


def seed():
    # ### commands auto generated by Alembic - please adjust! ###
    file = open(file=base_dir + '/app/static/files/postal_code.json', mode='r')
    data = json.loads(file.read())

    # Create a set to store the pin codes that are already inserted
    existing_pin_codes = set()

    # Iterate through the data and insert only if pin code doesn't exist in the set
    for row in data:
        pincode_str = str(row['pincode'])
        if pincode_str not in existing_pin_codes:
            op.bulk_insert(PostalCodeMaster.__table__, [row])
            existing_pin_codes.add(pincode_str)

    # ### end Alembic commands ###
